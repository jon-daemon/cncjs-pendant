#!/usr/bin/env node

var fs = require('fs');
var HID = require('node-hid');
var path = require('path');
var program = require('commander');
var serialport = require('serialport');
var inquirer = require('inquirer');

var pkg = require('../package.json');
var serverMain = require('../index');

var options = {};

program
	.version(pkg.version)
	.usage('-s <secret> -p <port> [options]')
	.option('-l, --list', 'list available ports then exit')
    .option('-s, --secret', 'the secret key stored in the ~/.cncrc file')
	.option('-p, --port <port>', 'path or name of serial port')
	.option('-b, --baudrate <baudrate>', 'baud rate (default: 115200)', 115200)
	.option('--socket-address <address>', 'socket address or hostname (default: localhost)', 'localhost')
	.option('--socket-port <port>', 'socket port (default: 8000)', 8000)
	.option('--controller-type <type>', 'controller type: Grbl|Smoothie|TinyG (default: Grbl)', 'Grbl')
    .option('--access-token-lifetime <lifetime>', 'access token lifetime in seconds or a time span string (default: 30d)', '30d')

program.parse(process.argv);

var options = {
    secret: program.secret,
    port: program.port,
    baudrate: program.baudrate,
    socketAddress: program.socketAddress,
    socketPort: program.socketPort,
    controllerType: program.controllerType,
    accessTokenLifetime: program.accessTokenLifetime
};

if (options.list) {
	serialport.list().then(function(ports) {
		ports.forEach(function(port) {
			console.log(port.path);
		});
	}).catch((err) => {
        console.error(err)
        process.exit(1)
    })
	return;
}

var store = {
    controller: {
        state: {},
        settings: {}
    },
    sender: {
        status: {}
    }
};

function getButton(buttonData) {
    // axisToggleButton
    const axisToggleButton = 128; // button1

    // speedButtons
    const speedButtonX = 64; // button2
    const speedButtonX10 = 32; // button3
    const speedButtonX100 = 16; // button4
    const speedButtonX1000 = 8; // button5

    switch(buttonData) {
        case axisToggleButton:
            return "axisToggle"

        case speedButtonX:
            return "speedButtonX"

        case speedButtonX10:
            return "speedButtonX10"

        case speedButtonX100:
            return "speedButtonX100"

        case speedButtonX1000:
            return "speedButtonX1000"
    }

    return "unknown"
}

function getDirection(controllerData) {
    var d1 = controllerData[0];
    var d2 = controllerData[1];

    // n: d1=127, d2=0
    // c: d1=127, d2=127
    // s: d1=127, d2=255

    // w: d1=0, d2=127
    // nw: d1=0, d2=0
    // sw: d1=0, d2=255

    // e: d1=255, d2=127
    // ne: d1=255, d2=0
    // se: d1=255, d2=255

    if(d1 == 127) {
        if(d2 == 0) {
            return "north"
        }

        if(d2 == 127) {
            return "center"
        }

        if(d2 == 255) {
            return "south"
        }
    }

    if(d1 == 0) {
        if(d2 == 0) {
            return "northwest"
        }

        if(d2 == 127) {
            return "west"
        }

        if(d2 == 255) {
            return "southwest"
        }
    }

    if(d1 == 255) {
        if(d2 == 0) {
            return "northeast"
        }

        if(d2 == 127) {
            return "east"
        }

        if(d2 == 255) {
            return "southeast"
        }
    }

    return "unknown"
}

var createServer = function(options) {
    serverMain(options, function(err, socket) {
        // Grbl
        socket.on('Grbl:state', function(state) {
            store.controller.state = state;
        });
        socket.on('Grbl:settings', function(settings) {
            store.controller.settings = settings;
        });

        // Smoothie
        socket.on('Smoothie:state', function(state) {
            store.controller.state = state;
        });
        socket.on('Smoothie:settings', function(settings) {
            store.controller.settings = settings;
        });

        // TinyG
        socket.on('TinyG:state', function(state) {
            store.controller.state = state;
        });
        socket.on('TinyG:settings', function(settings) {
            store.controller.settings = settings;
        });

        // Sender
        socket.on('sender:status', function(data) {
            store.sender.status = data;
        });

        console.log('finding joystick device');

        var devices = HID.devices();

        var deviceInfo = devices.find(function(device) {
            return device.product.toLowerCase().includes("joystick");
        });

        console.log('connecting to joystick device');

        var device = new HID.HID(deviceInfo.path);

        const DEBOUNCE_MS = 100;
        const MOVE_DISTANCE = 15;
        const SMOOTH = true;
        const SMOOTH_JOG_SPEED_X = 10; // MM/min
        const SMOOTH_JOG_SPEED_X10 = 100; // MM/min
        const SMOOTH_JOG_SPEED_X100 = 1000; // MM/min
        const SMOOTH_JOG_SPEED_X1000 = 5000; // MM/min
        const SMOOTH_JOG_STEP = 50; // Unit step for continuous jog in MM
        const SMOOTH_JOG_COMMAND_INTERVAL = 200; // period in ms at which the $J jogging commands are sent to the machine
        const SMOOTH_JOG_STOP_DELAY = 100;

        var currentAxis = "xy";
        var currentButtonPressed = null;
        var currentDirection = null;
        var currentJogSpeed = SMOOTH_JOG_SPEED_X;
        var debounceTimeout = null;
        var smoothJogInterval = null;
        var smoothJogLocked = false;

        var toggleAxis = function() {
            if(currentAxis == "xy") {
                currentAxis = "z";
                return
            } else {
                currentAxis = "xy";
            }
        }

        console.log('waiting on joystick data');

        device.on("data", function(data) {
            var controllerData = data.toJSON().data;
            var buttonData = controllerData[6];

            if(buttonData === 0) {
                currentButtonPressed = null;
            } else {
                var newButtonPressed = getButton(buttonData);

                if(newButtonPressed != currentButtonPressed) {
                    currentButtonPressed = newButtonPressed;

                    switch(currentButtonPressed) {
                        case "axisToggle":
                            console.log("axisToggle pressed")

                            toggleAxis()

                            break;

                        case "speedButtonX":
                            console.log("speedButtonX pressed")

                            currentJogSpeed = SMOOTH_JOG_SPEED_X;

                            break;

                        case "speedButtonX10":
                            console.log("speedButtonX10 pressed")

                            currentJogSpeed = SMOOTH_JOG_SPEED_X10;

                            break;

                        case "speedButtonX100":
                            console.log("speedButtonX100 pressed")

                            currentJogSpeed = SMOOTH_JOG_SPEED_X100;

                            break;

                        case "speedButtonX1000":
                            console.log("speedButtonX1000 pressed")

                            currentJogSpeed = SMOOTH_JOG_SPEED_X1000;

                            break;

                        default:
                            console.log("unknown", buttonData)

                            break;
                    }
                }
            }

            var newDirection = getDirection(controllerData);
            if(newDirection !== currentDirection) {
                currentDirection = newDirection

                if(debounceTimeout == null) {
                    debounceTimeout = setTimeout(function() {
                        console.log(currentDirection);

                        if(SMOOTH) {
                            var smoothJog = function(...selectedAxis) {
                                var axisString = selectedAxis.map(axis => axis + SMOOTH_JOG_STEP).join(" ")

                                socket.emit('write', options.port, "$J=G91 G21 " + axisString + " F"+ currentJogSpeed + ";\n")
                            }

                            var stopSmoothJogging = function() {
                                if(smoothJogInterval) {
                                    clearInterval(smoothJogInterval);
                                    smoothJogLocked = true;
                                    smoothJogInterval = null;

                                    socket.emit('write', options.port, "\x85\n")

                                    console.log("smooth jogging stopped")

                                    setTimeout(function() {
                                        smoothJogLocked = false;
                                    }, SMOOTH_JOG_STOP_DELAY);
                                }
                            }

                            var startSmoothJogging = function(...selectedAxis) {
                                if(smoothJogLocked) {
                                    return;
                                }

                                stopSmoothJogging();

                                smoothJog.apply(null, selectedAxis);

                                smoothJogInterval = setInterval(function() {
                                    smoothJog.apply(null, selectedAxis);
                                }, SMOOTH_JOG_COMMAND_INTERVAL);
                            }

                            switch (currentDirection) {
                                case "center":
                                    stopSmoothJogging();
                                    break;

                                case "north":
                                    if(currentAxis == "xy") {
                                        startSmoothJogging("Y")
                                    } else {
                                        startSmoothJogging("Z")
                                    }

                                    break;

                                case "south":
                                    if(currentAxis == "xy") {
                                        startSmoothJogging("Y-")
                                    } else {
                                        startSmoothJogging("Z-")
                                    }

                                    break;

                                case "east":
                                    if(currentAxis == "xy") {
                                        startSmoothJogging("X")
                                    } else {
                                        stopSmoothJogging()
                                    }

                                    break;

                                case "west":
                                    if(currentAxis == "xy") {
                                        startSmoothJogging("X-")
                                    } else {
                                        stopSmoothJogging()
                                    }

                                    break;

                                case "northeast":
                                    if(currentAxis == "xy") {
                                        startSmoothJogging("X", "Y")
                                    } else {
                                        stopSmoothJogging()
                                    }

                                    break;

                                case "northwest":
                                    if(currentAxis == "xy") {
                                        startSmoothJogging("X-", "Y")
                                    } else {
                                        stopSmoothJogging()
                                    }

                                    break;

                                case "southeast":
                                    if(currentAxis == "xy") {
                                        startSmoothJogging("X", "Y-")
                                    } else {
                                        stopSmoothJogging()
                                    }

                                    break;

                                case "southwest":
                                    if(currentAxis == "xy") {
                                        startSmoothJogging("X-", "Y-")
                                    } else {
                                        stopSmoothJogging()
                                    }

                                    break;

                                default:
                                    break;
                            }
                        } else {
                            var moveDistance = MOVE_DISTANCE;

                            switch (currentDirection) {
                                case "north":
                                    socket.emit("write", options.port, "G91 Y" + moveDistance + ";\n");
                                    break;

                                case "south":
                                    socket.emit("write", options.port, "G91 Y-" + moveDistance + ";\n");
                                    break;

                                case "east":
                                    socket.emit("write", options.port, "G91 X" + moveDistance + ";\n");
                                    break;

                                case "west":
                                    socket.emit("write", options.port, "G91 X-" + moveDistance + ";\n");
                                    break;

                                case "northeast":
                                    socket.emit("write", options.port, "G91 X" + moveDistance + " Y" + moveDistance + ";\n");
                                    break;

                                case "northwest":
                                    socket.emit("write", options.port, "G91 X-" + moveDistance + " Y" + moveDistance + ";\n");
                                    break;

                                case "southeast":
                                    socket.emit("write", options.port, "G91 X" + moveDistance + " Y-" + moveDistance + ";\n");
                                    break;

                                case "southwest":
                                    socket.emit("write", options.port, "G91 X-" + moveDistance + " Y-" + moveDistance + ";\n");
                                    break;

                                default:
                                    break;
                            }
                        }

                        debounceTimeout = null;
                    }, DEBOUNCE_MS)
                }
            }
        });
    });
};

if (options.port) {
    createServer(options);
    return;
}

serialport.list().then(function (ports) {
    const choices = ports.map(function(port) {
        return port.path;
    });

    inquirer.prompt([{
        type: 'list',
        name: 'port',
        message: 'Specify which port you want to use?',
        choices: choices
    }]).then(function(answers) {
        options.port = answers.port;

        createServer(options);
    });
}).catch((err) => {
    console.error(err)
    process.exit(1)
})
